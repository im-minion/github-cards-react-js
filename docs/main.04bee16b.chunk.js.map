{"version":3,"sources":["Card.js","CardList.js","FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["Card","profile","this","props","className","src","avatar_url","alt","name","company","React","Component","CardList","data","map","key","id","FormComponent","state","userName","handleSubmit","event","a","preventDefault","fetch","method","headers","response","json","resp","onSubmit","setState","type","placeholder","value","onChange","target","App","profiles","addNewProfile","profileData","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAiBeA,G,6KAbP,IAAMC,EAAUC,KAAKC,MACrB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKJ,EAAQK,WAAYC,IAAI,SAClC,yBAAKH,UAAU,QACX,yBAAKA,UAAU,QAAQH,EAAQO,MAC/B,yBAAKJ,UAAU,WAAWH,EAAQQ,e,GARnCC,IAAMC,YCOVC,MANR,YAAgC,IAAD,IAAZC,YAAY,MAAL,GAAK,EAClC,OAAQ,6BACHA,EAAKC,KAAI,SAAAb,GAAO,OAAI,kBAAC,EAAD,eAAMc,IAAKd,EAAQe,IAAQf,S,uBCiCzCgB,E,4MAhCXC,MAAQ,CAAEC,SAAU,I,EAEpBC,a,uCAAe,WAAOC,GAAP,iBAAAC,EAAA,6DACXD,EAAME,iBADK,SAEYC,MAAM,gCAAD,OAAiC,EAAKN,MAAMC,UAAY,CAChFM,OAAQ,MACRC,QAAS,CACL,eAAgB,sBALb,cAELC,EAFK,gBAQQA,EAASC,OARjB,OAQLC,EARK,OASX,EAAK1B,MAAM2B,SAASD,GACpB,EAAKE,SAAS,CACVZ,SAAU,KAXH,2C,6GAeL,IAAD,OACL,OACI,0BAAMW,SAAU5B,KAAKkB,cACjB,2BAAOY,KAAK,OAAOC,YAAY,kBAC3BC,MAAOhC,KAAKgB,MAAMC,SAClBgB,SAAU,SAAAd,GAAK,OAAI,EAAKU,SAAS,CAC7BZ,SAAUE,EAAMe,OAAOF,WAG/B,iD,GA7BYxB,IAAMC,WC2CnB0B,E,4MA5BbnB,MAAQ,CACNoB,SAAU,I,EAGZC,cAAgB,SAACC,GAQf,EAAKT,SAAS,CACZO,SAAS,GAAD,mBAAM,EAAKpB,MAAMoB,UAAjB,CAA2BE,O,uDAKrC,OACE,yBAAKpC,UAAU,UACb,4BAAKF,KAAKC,MAAMsC,OAChB,kBAAC,EAAD,CAAeX,SAAU5B,KAAKqC,gBAC9B,kBAAC,EAAD,CAAU1B,KAAMX,KAAKgB,MAAMoB,gB,GAnCjB5B,IAAMC,WCOJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,CAAKP,MAAM,yBACbQ,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04bee16b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n    render() {\r\n        const profile = this.props;\r\n        return (\r\n            <div className=\"github-profile\">\r\n                <img src={profile.avatar_url} alt=\"none\" />\r\n                <div className=\"info\">\r\n                    <div className=\"name\">{profile.name}</div>\r\n                    <div className=\"company\">{profile.company}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport function CardList({data = []}) {\r\n    return (<div>\r\n        {data.map(profile => <Card key={profile.id} {...profile} />)}\r\n    </div>);\r\n}\r\n\r\nexport default CardList;","\r\nimport React from 'react';\r\n\r\nclass FormComponent extends React.Component {\r\n\r\n    // OTHER Option => userNameInput = React.createRef(); and add ------ ref={this.userNameInput} in input field\r\n    state = { userName: '' }\r\n\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const response = await fetch(`https://api.github.com/users/${this.state.userName}`, {\r\n            method: 'GET', // string or object\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        const resp = await response.json(); //extract JSON from the http response\r\n        this.props.onSubmit(resp);\r\n        this.setState({\r\n            userName: ''\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" placeholder=\"GitHub Username\"\r\n                    value={this.state.userName}\r\n                    onChange={event => this.setState({\r\n                        userName: event.target.value\r\n                    })}\r\n                />\r\n                <button>Add Card</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport FormComponent from './FormComponent';\n\nclass App extends React.Component {\n\n  // Option: 1\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     profiles: testData,\n\n  //   };\n  // }\n\n  // Option: 2\n\n  state = {\n    profiles: []\n  }\n\n  addNewProfile = (profileData) => {\n    // OPTION 1 : (not working.. :())\n    // this.setState(prevState => ({\n    //   profiles: [...prevState, profileData]\n    // }));\n\n    // OPTION 2\n\n    this.setState({\n      profiles: [...this.state.profiles, profileData]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"header\">\n        <h3>{this.props.title}</h3>\n        <FormComponent onSubmit={this.addNewProfile} />\n        <CardList data={this.state.profiles} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App title='The GitHub Cards App'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}